openapi: 3.1.2
info:
  title: Sandbox API
  description: |
    RESTful API for managing isolated sandbox environments for executing code, 
    running commands, and transferring files on a remote server.

    ## Key Concepts

    - **Sandbox**: A temporary, isolated environment with a unique sandbox ID
    - **Automatic Cleanup**: Sandboxes expire after TTL or can be explicitly deleted

    ## Data plane via HTTP CONNECT (hybrid)

    - Sandbox lifecycle is managed via REST over HTTPS.
    - For streaming command execution and file transfer, clients may establish an HTTP CONNECT tunnel to a specific sandbox using the same API host: `CONNECT /sandboxes/{sandboxId}`.
    - The CONNECT request must include a bearer token in the `Proxy-Authorization: Bearer <token>` header. On success, the server responds with `200 Connection Established` and forwards raw TCP bytes to the sandbox backend (e.g., SSH/SFTP).

  version: 1.0.0
  contact:
    name: Sandbox API Support
    email: support@example.com

servers:
  - url: https://api.sandbox.example.com/v1
    description: Production server
  - url: http://localhost:8080/v1
    description: Development server

security:
  - bearerAuth: []

tags:
  - name: Sandboxes
    description: Manage sandboxes
  - name: Commands
    description: Execute commands in sandbox
  - name: Files
    description: File upload/download operations
  - name: Code
    description: Execute code snippets

paths:
  /sandboxes:
    post:
      tags:
        - Sandboxes
      summary: Create a new sandbox
      description: |
        Creates a new isolated sandbox environment with a unique sandbox ID.
        The sandbox is automatically created by the server and will be
        cleaned up when the sandbox expires or is explicitly deleted.
      operationId: createSandbox
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                ttl:
                  type: integer
                  description: Time-to-live in seconds (default 3600, max 28800)
                  default: 3600
                  minimum: 60
                  maximum: 28800
                image:
                  type: string
                  description: Sandbox environment image
                  default: "a default image"
                sshPublicKey:
                  type: string
                  description: |
                    Optional SSH public key to authorize for SSH access to this sandbox. Provide an OpenSSH-formatted
                    public key (e.g., ssh-ed25519, ecdsa-sha2-nistp256, or ssh-rsa). The server will install this key
                    into the sandbox's authorized keys for the sandbox user.
                  example: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIB2VExampleBase64KeyMaterial user@example"
                metadata:
                  type: object
                  additionalProperties: true
                  description: Optional metadata to attach to the sandbox
                  example:
                    user: "john.doe"
                    project: "test-automation"
      responses:
        "200":
          description: Sandbox created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sandbox"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalError"

    get:
      tags:
        - Sandboxes
      summary: List all active sandboxes
      description: Returns a list of all active sandboxes for the authenticated user
      operationId: listSandboxes
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: List of sandboxes
          content:
            application/json:
              schema:
                type: object
                properties:
                  sandboxes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Sandbox"
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        "401":
          $ref: "#/components/responses/Unauthorized"

  /sandboxes/{sandboxId}:
    get:
      tags:
        - Sandboxes
      summary: Get sandbox details
      description: Retrieve information about a specific sandbox
      operationId: getSandbox
      parameters:
        - $ref: "#/components/parameters/SandboxId"
      responses:
        "200":
          description: Sandbox details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sandbox"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /sandboxes/{sandboxId}/pause:
    post:
      tags:
        - Sandboxes
      summary: Pause a sandbox
      description: Transitions the sandbox to the paused state.
      operationId: pauseSandbox
      parameters:
        - $ref: "#/components/parameters/SandboxId"
      responses:
        "200":
          description: Sandbox paused
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sandbox"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /sandboxes/{sandboxId}/resume:
    post:
      tags:
        - Sandboxes
      summary: Resume a sandbox
      description: Transitions the sandbox to the running state.
      operationId: resumeSandbox
      parameters:
        - $ref: "#/components/parameters/SandboxId"
      responses:
        "200":
          description: Sandbox resumed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sandbox"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      tags:
        - Sandboxes
      summary: Delete a sandbox
      description: |
        Terminates the sandbox and removes all resources.
        All files and data in the sandbox will be permanently deleted.
      operationId: deleteSandbox
      parameters:
        - $ref: "#/components/parameters/SandboxId"
      responses:
        "200":
          description: Sandbox deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /sandboxes/{sandboxId}/commands:
    post:
      tags:
        - Commands
      summary: Execute a shell command
      description: |
        Executes a shell command in the sandbox directory.
        The command runs with the working directory set to the sandbox path.
      operationId: executeCommand
      parameters:
        - $ref: "#/components/parameters/SandboxId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommandRequest"
      responses:
        "200":
          description: Command executed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommandResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "408":
          description: Command timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /sandboxes/{sandboxId}/code:
    post:
      tags:
        - Code
      summary: Execute code
      description: |
        Uploads and executes code in the sandbox.
        The code is executed with the appropriate interpreter.
      operationId: executeCode
      parameters:
        - $ref: "#/components/parameters/SandboxId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                language:
                  type: string
                  description: Programming language of the code
                  enum: [python, javascript, bash]
                  default: python
                code:
                  type: string
                  description: Code snippet to execute
                  example: |
                    import sys
                    print(f"Python version: {sys.version}")
                    print("Hello from sandbox!")
                timeout:
                  type: integer
                  description: Execution timeout in seconds
                  default: 60
                  minimum: 1
                  maximum: 300
      responses:
        "200":
          description: Code executed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommandResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "408":
          description: Execution timeout
        "401":
          $ref: "#/components/responses/Unauthorized"

  /sandboxes/{sandboxId}/files:
    post:
      tags:
        - Files
      summary: Upload a file
      description: Upload a file to the sandbox directory
      operationId: uploadFile
      parameters:
        - $ref: "#/components/parameters/SandboxId"
        - name: path
          in: query
          description: Destination path in sandbox (relative)
          schema:
            type: string
            example: "scripts/test.py"
        - name: overwrite
          in: query
          description: Overwrite existing file
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileInfo"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          description: File already exists (when overwrite=false)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "413":
          description: File too large
        "401":
          $ref: "#/components/responses/Unauthorized"
    get:
      tags:
        - Files
      summary: Download a file
      description: Download a file from the sandbox directory
      operationId: downloadFile
      parameters:
        - $ref: "#/components/parameters/SandboxId"
        - name: filePath
          in: query
          description: Path to the file (relative to sandbox root)
          schema:
            type: string
            example: "results.txt"
      responses:
        "200":
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            text/plain:
              schema:
                type: string
          headers:
            Content-Disposition:
              schema:
                type: string
              description: 'attachment; filename="<filename>"'
            Content-Length:
              schema:
                type: integer
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Check if the API is healthy
      operationId: healthCheck
      security: []
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token authentication
    proxyBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token used in the `Proxy-Authorization` header for HTTP CONNECT requests.

  parameters:
    SandboxId:
      name: sandboxId
      in: path
      required: true
      description: Unique sandbox identifier
      schema:
        type: string
        format: uuid
      example: "550e8400-e29b-41d4-a716-446655440000"

  schemas:
    Sandbox:
      type: object
      required:
        - sandboxId
        - status
        - createdAt
        - expiresAt
      properties:
        sandboxId:
          type: string
          format: uuid
          description: Unique sandbox identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        status:
          type: string
          enum: [running, paused]
          description: Current sandbox status
        createdAt:
          type: string
          format: date-time
          description: Sandbox creation timestamp
        expiresAt:
          type: string
          format: date-time
          description: Sandbox expiration timestamp
        lastActivityAt:
          type: string
          format: date-time
          description: Timestamp of last activity
        metadata:
          type: object
          additionalProperties: true
          description: User-provided metadata
    CommandRequest:
      type: object
      required:
        - command
      properties:
        command:
          type: string
          description: Shell command to execute
          example: "ls -la"
        timeout:
          type: integer
          description: Execution timeout in seconds
          default: 60
          minimum: 1
          maximum: 300
        env:
          type: object
          additionalProperties:
            type: string
          description: Environment variables to set
          example:
            DEBUG: "true"
            PATH: "/usr/local/bin:/usr/bin:/bin"

    CommandResult:
      type: object
      required:
        - status
        - exitCode
      properties:
        status:
          type: string
          enum: [completed, failed, timeout]
          description: Command execution status
        exitCode:
          type: integer
          description: Process exit code (null if still running)
          nullable: true
        stdout:
          type: string
          description: Standard output
        stderr:
          type: string
          description: Standard error output

    FileInfo:
      type: object
      required:
        - name
        - path
        - type
        - size
      properties:
        name:
          type: string
          description: File name
          example: "script.py"
        path:
          type: string
          description: Relative path from sandbox root
          example: "scripts/script.py"
        type:
          type: string
          enum: [file, directory, symlink]
          description: File type
        size:
          type: integer
          format: int64
          description: File size in bytes
        permissions:
          type: string
          description: Unix file permissions
          example: "rw-r--r--"
        createdAt:
          type: string
          format: date-time
        modifiedAt:
          type: string
          format: date-time
        checksum:
          type: string
          description: MD5 checksum of file content
          example: "5d41402abc4b2a76b9719d911017c592"

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error code
          example: "SESSION_NOT_FOUND"
        message:
          type: string
          description: Human-readable error message
          example: "The requested session does not exist or has expired"
        details:
          type: object
          additionalProperties: true
          description: Additional error details
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          description: Unique request identifier for debugging

  responses:
    BadRequest:
      description: Bad request - invalid parameters
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: "INVALID_PARAMETER"
            message: "The command parameter is required"
            timestamp: "2025-10-23T10:30:00Z"

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: "UNAUTHORIZED"
            message: "Invalid or missing authentication token"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: "SANDBOX_NOT_FOUND"
            message: "The requested sandbox does not exist or has expired"

    TooManyRequests:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
        X-RateLimit-Remaining:
          schema:
            type: integer
        X-RateLimit-Reset:
          schema:
            type: integer
            format: int64

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: "INTERNAL_ERROR"
            message: "An unexpected error occurred"
            requestId: "req-123-abc"

    Conflict:
      description: Invalid state for requested operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: "INVALID_STATE"
            message: "Sandbox is already paused or cannot be paused"
